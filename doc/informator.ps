%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86f Copyright 2001 Radical Eye Software
%%Title: informator.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips informator.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.07.21:2013
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (informator.dvi)
@start
%DVIPSBitmapFont: Fa cmss10 10 2
/Fa 2 83 df<D8FFE0EC1FC0A27FA27FA2487EA2137EA2137F7F80131FA26D7EA2801307
80130380130180130080A2147FA2EC3F80A2EC1FC0A2140F15E0140715F0140315F81401
15FC1400A2157EA2157F153F169F151FA2ED0FDFA2ED07FFA281A281A22A3A78B93B>78
D<B67E15F815FE6F7E8290C77FED1FF06F7EED03FC150182150082A282A35EA25E15015E
1503ED0FF84B5AEDFFE090B65A5E4BC7FC15F815E09038000FF01407811403811401816E
7E8182153F826F7EA26F7EA26F7E1503826F7EA26F7EA2EE7F80EE3FC0A2EE1FE02B3A78
B936>82 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb skakf10 10 41
/Fb 41 122 df<17301770A317781738173C171FB912F018F818F0CAEA0F80EF1E005F17
3817781770A31720351479AA4B>65 D<134013E0A37F12017F487EEA0FFF387FEFE038FE
E7F03878E1E03800E000B3B3A5143571BB32>67 D<92380FFF8092B512F8020314FE913A
0FF800FF80DA3F80EB0FE002FEC7EA03F8D903F8EC00FED907E0153FD90F80ED0F80011E
C9EA03C049707E49707E49177848488349171C0003181E48488390CB7E481980000E1803
001E19C0001C1801003C19E000381800A2007819F000701970A300F003F8157848DA03FE
15384B7EA24B7FA46F90C8FCA26F5A6CDA00F81578007092C91270A3007819F0003819E0
A2003C1801001C19C0001E1803000E1980000F18076C19006D5F6C6C171E0001181C6D17
3C6C6C5F01785F6D4C5A6D4C5A6D6CED0F80D907E0033FC7FCD903F815FED900FEEC03F8
DA3F80EB0FE0DA0FF8EBFF800203B548C8FC020014F8030F1380454679C353>I<162016
7016F8A24B7E16DCED03DE168EED078F1607030F7FED0E03031E7FED1C01033C7FED3800
03787F0370137003F013784B13380201143C4B131C0203141E4B130E0207140F92C77E4A
81020E1403021E81021C1401023C81023814000278810270157002F015784A1538010116
3C4A151C0103161E4A150E0107160F91C97E4983010E1603011E83011C1601013C830138
16000178830170177001F017784917380001183C49171C0003181E49170E0007180F90CB
7E481980000E1803001E19C0001C1801003C19E000381800007819F000701970BB12F8A3
454579C353>I<007FBA12F8BBFCA200E0CC1238B3B3B3A9BB12F8A3454579C353>I<0403
B612F85E8293C7381E00386060604D5A4D5A4D5A4DC7FC171E5F5F4D14784C4814F84C48
13014C4813034CC7EA07B8041EEC0F384C141E4C143C4C14784B4814F04B48EB01E04B48
EB03C04BC7EA0780031EEC0F004B141E4B5C4B5C4A485C4A48494813004A48495A4AC748
5A021E4AC8FC4A141E4A5C4A5C49485C4948495A4948495A49C7485A011E4AC9FC49141E
495C495C48485C4848495A4848495A48C7485A001E4ACAFC48141E485C485C485C48495A
C7485A4A5A4ACBFC141E5C5C5C495A495A495A49CCFC130E454579C353>I<0260153002
E015380101163C49488149488149C96C7E011E707E49707E017FB87E90B97E4884D803C0
CA121E48488348CBEA0780001EF003C048F001E048F000F0481978A2007819F06CF001E0
6CF003C06CF007806C6CEF0F006C6C171E6CB912FC6C606D5F013CC9EA01E06D4C5A6D4C
5A6D6C4BC7FC6D6C151E6D6C5D0100163802601530452479B253>I<007FBA12F8BBFCA2
00E0CC1238A516201670B3A6017FB812F090B912F86D17F090C80070C8FCB3A793C9FCA5
BB12F8A3454579C353>I<00C019186C19386C1978007819F06CF001E06CF003C06CF007
806C6CEF0F006C6C171E6C6C5F6C6C5F01785F6D4C5A6D4C5A6D4C5A6D6C4BC7FC6D6C15
1E6D6C5D6D6C5D02785D6E4A5A6E4A5A6E4A5A6E6C49C8FC6E6C131E6E6C5B6E6C5B0378
5B6F485A6F485A6F485ADB078FC9FCED03DEED01FC6F5AA24B7EED03DEED078F92380F07
8092381E03C04B6C7E4B6C7E4B13784A487F4A487F4A487F4AC76C7E021E6E7E4A6E7E4A
6E7E4A157849488149488149488149C96C7E011E707E49707E49707E4917784848834848
8348488348CBEA0780001EF003C048F001E048F000F0481978481938454579C353>I<16
201670B3B3B3ABBB12F8A3454579C353>76 D<032013200370137003F013F0913901E001
E0913903C003C091390780078091390F000F00021E131E4A5B4A5B4A5B4948485A494848
5A4948485A494848C7FC011E131E495B495B495B4848485A4848485A4848485A484848C8
FC001E131E485B485B485B147800787F6C7F6C7F6C6D7E6C6C6C7E6C6C6C7E6C6C6C7E6C
6C137801787F6D7F6D7F6D6D7E6D6C6C7E6D6C6C7E6D6C6C7E6D6C137802787F6E7F6E7F
6EEB07809139078003C0913903C001E0913901E000F06E6C1370036013302C3579BB42>
I<0040132000E013706C137800787F6C7F6C7F6C6D7E6C6C6C7E6C6C6C7E6C6C6C7E6C6C
137801787F6D7F6D7F6D6D7E6D6C6C7E6D6C6C7E6D6C6C7E6D6C137802787F6E7F6E7F6E
EB07809139078003C0913903C001E0913901E000F06E6C137817F0913901E001E0913903
C003C091390780078091390F000F00021E131E4A5B4A5B4A5B4948485A4948485A494848
5A494848C7FC011E131E495B495B495B4848485A4848485A4848485A484848C8FC001E13
1E485B485B4813704813602D3571BB42>79 D<0040134000E013E0B3B3B3AE134579C321
>I<12C012F07E127E121FEA0FC0EA03E0EA01F8EA007C133FEB0F80EB07E0EB01F0EB00
FC143E6E7EEC07C0EC03F0EC00F8157E151FED0FC0ED03E0ED01F8ED007C163FEE0F80EE
07E0EE01F0EE00FC173EEF1F80EF07C0EF03F0EF00F8EF01F0EF03E0EF0FC0EF1F00177E
17F8EE03F0EE07C0EE1F80043EC7FC16FCED01F0ED07E0ED0F80033FC8FC157C4A5AEC03
E0EC0FC04AC9FC147E14F8EB03F0EB07C0EB1F80013ECAFC13FCEA01F0EA07E0EA0F8000
3FCBFC127C5A12E0354579C342>83 D<92380FFF8092B512F8020314FE913A0FF800FF80
DA3F80EB0FE002FEC7EA03F8D903F8EC00FED907E0153FD90F800120EB0F80011EC70070
EB03C049707E49707E49177848488349171C0003181E48488390C881481980000E180300
1E19C0001C1801003C19E000381800A2007819F000701970A300F01978481938A3017FB8
12F090B912F86D17F090C80070C8FCA46C197800701970A3007819F0003819E0A2003C18
01001C19C0001E1803000E1980000F18076C19006D5F6C6C171E0001181C6D173C6C6C5F
01785F6D4C5A6D4C5A6D6C90C7EA0F80D907E0033FC7FCD903F815FED900FEEC03F8DA3F
80EB0FE0DA0FF8EBFF800203B548C8FC020014F8030F1380454679C353>I<92380FFF80
92B512F8020314FE913A0FF800FF80DA3F80EB0FE002FEC7EA03F8D903F8EC00FED907E0
153FD90F80ED0F80011EC9EA03C049707E49707E49177848488349171C0003181E484883
90CB7E481980000E1803001E19C0001C1801003C19E000381800A2007819F000701970A3
00F01978481938AA6C197800701970A3007819F0003819E0A2003C1801001C19C0001E18
03000E1980000F18076C19006D5F6C6C171E0001181C6D173C6C6C5F01785F6D4C5A6D4C
5A6D6CED0F80D907E0033FC7FCD903F815FED900FEEC03F8DA3F80EB0FE0DA0FF8EBFF80
0203B548C8FC020014F8030F1380454679C353>I<13E0A412015B1203EA0F80B912F018
F818F0D80F80CAFCEA03C012017F120017201770A290C9FC17781738173C83EF0F80B912
F018F818F0CAEA1F00173C173817781770A31720352479B242>I<037FB712F8A30370C9
1238B3A4B812F0A300E0C738700070AE037FB712F8A28192C70070C8FCB3A3B812F0A27E
454579C353>97 D<93380FFFC093B512FC0307ECFF80923A3FF8007FF0DBFF80EB07FCDA
03FCC8B4FCDA0FE0ED1FC0DA1F80ED07E0023EC9EA01F002F8EE007C494883494883D907
80EF078049CB6C7E011E727E49727E4919780170193801F0193C48488548488549850007
1B8090CD1203481BC0000E1A01001E1BE0001C1A00A2003C1BF000381B70A200781B7800
701B38A300F01B3C481B1CA4BD12FCA3562C79AA64>I<14021407B3A2B812F0A3C70007
C8FCB3A2140291C9FCA5B812F0A32C3579C33A>I<EB0FF0EB7FFE48B512803903F81FC0
3907C003E048C712F0001E147848143C0038141C0078141E0070140EA200F0140F481407
A66C140F0070140EA20078141E0038141C003C143C6C14786C14F03907C003E03903F81F
C06CB5128039007FFE00EB0FF090C8FCAAEB0FF0EB7FFE48B512803903F81FC03907C003
E048C712F0001E147848143C0038141C0078141E0070140EA200F0140F481407A66C140F
0070140EA20078141E0038141C003C143C6C14786C14F03907C003E03903F81FC06CB512
8039007FFE00EB0FF0204A6BC34B>I<B812F0A3CBFCA514035CB3A2B812F0A3C70007C8
FCB3A22C3479B23A>I<14021407B3A2B812F0A3C70007C8FCB3A2140291C9FCA5B812F0
A3CBFCA5B812F0A32C3D79C33A>I<B812F0A3CBFCA6B812F0A3CBFCA514035CB3A2B812
F0A3C70007C8FCB3A22C3D79BB3A>I<14035CB3A2B8D8F03FB712FCA3C70007CEFCB3A2
5E2C79AA6C>I<507E1A03B3A2B8D8F03FB712FCA3CDD80380C7FCB3A25E2C79AA6C>I<B8
12F0A3CBFCA6B812F0A32C0C79A23A>I<D801FCEB03F8D807FFEB0FFE486D487E3B1F07
C03E0F803B3C01E07803C03A3800F0F0010078D979E013E00070903839C00000F0013F14
F0486D481370A26EC7FCA24A7EA26C496C13F00070013914E00078903879E0010038D9F0
F013C03A3C01E078033B1F07C03E0F803B0FFF801FFF006C496C5AD801FCEB03F82C1879
A83A>I<BB12F8A34503799E53>I<0240142002E01470B0BA12F019F819F0C700E0C70070
C7FCB3A4BA12F019F819F0C700E0C70070C7FCB03D3D79BB4B>I<B812F0A3CBFCA5B812
F0A3CBFCA5D801FCEB03F8D807FFEB0FFE486D487E3B1F07C03E0F803B3C01E07803C03A
3800F0F0010078D979E013E00070903839C00000F0013F14F0486D481370A26EC7FCA24A
7EA26C496C13F00070013914E00078903879E0010038D9F0F013C03A3C01E078033B1F07
C03E0F803B0FFF801FFF006C496C5AD801FCEB03F82C2879B03A>I<033FB712F0B3A5BB
FCA300E0C7123FAF92C70070C8FCB3A5B812F0A27E444379C153>I<D90FF0EF03FCD97F
FE94381FFF8048B56C047F13E02703F81FC09338FE07F02707C003E0923901F000F848C7
6CDB03C0133C001E02784B487F486E4BC77E0038021C030E800078021E031E1580007002
0E031C1403A200F091280F0780783C15C0489128070FC0FC38140193381FE1FEA493380F
C0FC6C91280F0780783C14030070020EC8001C1580A20078021E031E14070038021C030E
1500003C023C030F5C6C4A6F6C131E6C4A6F6C5B2707C003E0DB01F013F82703F81FC092
3900FE07F06CB54893387FFFE06C6C48CA001F1380D90FF0DD03FCC7FC5A2079B068>
113 D<14201470A414F8A2497EEB07FF017F13F01477EB7C71D90070C7FCADEB03FE9038
1FFFC0017F13F03901FE03FC3903F0007ED807C0131F48C7EA0780001EEC03C0001C1401
003C15E048EC00F000701570A200F01578481538A86C157800701570A2007815F06CEC01
E0001C15C0001E14036CEC0780D807C0EB1F00D803F0137E3901FE03FC39007FFFF0011F
13C0D903FEC7FC253D69BB53>I<037FB712E0B3A6BBFCB105C0C8FCB3A7434278C153>I<
DB0FFF141092B500F01338020314FE913A0FF801FF80913A3F80001FE002FEC7EA03F0D9
01F8EC00FCD907E0153ED90F80151F49C9EA07B8013CEE03F84916014916004848ED03FF
495D0003705B484892C9FC90CDFC5A120E121E001CF00380123C003819C0007818011AE0
007018001AF01A7012F05A1A781A38A87E12701A781A70127812381AF0003C19E0121C00
1E1801000E19C0000F18036C19806D17076C6CEF0F000001180E6D171E6C6C5F01785F6D
5F011F4C5A6D6CED07C0D907E04B5AD901F8033FC7FCD900FEEC01FCDA3FC0EB07F8DA0F
FCEBFFE00203B6C8FCDA007F13FC03071380454679C353>I<D90FF0ED7F80D97FFE9138
03FFF048B56C010F13FC2703F81FC090381FC0FE2707C003E090383E001F48C76C0178EB
0780001E027849EB03C0486E4848EB01E00038021C4913000078DA1E0315F00070020E49
1470A200F0DA0F07157848020790C81238A66C020F6D14780070DA0E031570A20078021E
6D14F00038DA1C0115E0003C023C6D13016C4A6C6CEB03C06C4A0178EB07802707C003E0
013EEB1F002703F81FC090381FC0FE6CB5486DB45A6C6C48C7000313F0D90FF09138007F
80452079B053>I<124012E0B3B3B3ABBB12F8A27E454579C353>I<1A101A38B3B3B3ABBB
12F8A3454579C353>I<007C171F00FEEF3F806C177F6D16FF6D5D6C6C4B13006C6C4B5A
6C6C4B5A6C6C4B5A6C6C4B5A6C6C4B5A6C6D4A5A6C6D495B6D6C4990C7FC6D6C495A6D6C
495A6D6C495A6D6C495A6D6C495A6D6D485A6D01C15BDA7FE390C8FC91383FF7FE6EB45A
6E5B6E5B6E5B6E5BA24A7F4A7F4A7F4A7F91383FF7FE91387FE3FFDAFFC17F4901807F49
496C7E49486D7E49486D7E49486D7E49486D7E49486D7E49486D7F48496D7F4890C86C7E
48486F7E48486F7E48486F7E48486F7E48486F7E48486F1380498190CA127F48173F007C
EF1F00393873B453>I<913803FFE0021F13FC027F13FF49B612C0010715F0011F15FC49
81499038007FFFD9FFF8010F7F4801E001037F48018001007F4848C8EA3FF049151F4848
6F7E48486F7E491503003F83491501A248486F7EA290CA7E481880A248173FA86C177FA2
6C18006D5EA26C6C4B5AA26D1503001F5F6D15076C6C4B5A6C6C4B5A6D153F6C6C6CECFF
E06C01E001035B6C01F8010F5B6DB4017F90C7FC6D90B55A6D5D010715F0010115C06D6C
91C8FC021F13FC020313E0393873B453>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmssbx10 10 24
/Fc 24 123 df<903903FE01FF90260FFF831380013F018713C090B5FCA25A4813C71483
148148EB80076F13806F130092C8FCA9003F9039FF01FF8048028313C0B6FCA36C140300
071380B3AC7E6C496C13802A3B7EBA31>12 D<90380FFF8090B512F0000714FC001F14FF
168016C0EBF003D9C00113E0EA0F00000E15F0000C7FC8FCA649B5FC133F90B6FC000313
F8000F138048485A485A485AA2485AA45CA26D5A007F5BEBFC1F383FFFFEA26C13F86C5B
00039038C07FE0C648C8FC24297DA72C>97 D<EA3FE0487E12FFB1EC1FE0ECFFF801F313
FE01F7EBFF8090B612C016E0EBFE07D9F80113F0497EED7FF8A3153F16FCAEED7FF8A3ED
FFF0A26D4813E0EBFE0790B612C016801600D87FF713FCD83FE113F0C7EA7F80263B7BB9
2F>I<903803FFC0011F13FC017F13FF48B612C05A5A48EB807F3A1FFE001F8048481307
15034990C7FC127FA25B12FFAD127F7F16C015016C6C130315076C6CEB1FE0390FFF80FF
91B5FC7E000115806CECFE00011F13F80103138023297DA729>I<ED1FF8ED3FFCB2EB0F
F0EB7FFE48B512BF4814FF5A5A481381393FFE007F49133FA2485AA3485AAE127F7FA36C
6C137F6D13FF381FFF816C90B5FC7E6C14BF6C143F3A007FFC1FF8D90FF0C7FC263B7DB9
2F>I<903803FF80011F13F0017F13FC48B57E488048158048018113C04848C613E04913
7F4848EB3FF0A2485A151F16F812FFA25BA290B6FCA316F001E0C8FCA27FA2127FA37F00
3F15306D1470001FEC01F06C6C13079038FFC03F6C90B5FC7EC615C06D1400011F13FC01
0113C025297EA72A>I<D90FFFEB0F80017FEBE07F48B538F9FFC0000791B5FC5A481581
D9FE07EB800048486C7F497EA248486C7FA96C6C485BA26D5A6C6C485B90B6FC6C92C7FC
6C5C15F8D80E7F13E0010F90C8FC90CAFC120FA213C090B512FC6CECFFC016F016FC001F
815A3A7FE0001FFF49130348486D1380A281A46D5B6D5B6C6C49130001FC131F6CB65A6C
5D6C5D000315E0C66C91C7FC010713F02A397EA62E>103 D<EA3FE0487E12FFB1EC07F8
EC3FFE91B5128001F114C001F314E013F714C1D9FF0113F0497E5BA25BA25BB3A6127F6C
48EB7FE0243A7BB92F>I<EA7FC0EAFFE013F0A813E0EA7FC0C7FCA9EA3FE0EA7FF012FF
B3B0127FEA3FE00C3B7CBA15>I<EA3F80487E12FFB2EDFF80020313C05C4A13804A1300
4A5AEC7FF84A5A01C15B01C35B01CF5B01DF90C7FCEBFFFE5C5C5C80A2808080A201F37F
01E17F01C07FA26E7E6E7E6E7EA26E7E6E7E6E138016C0806E13E0007F147F6C48EB3FC0
233A7BB92C>107 D<EA3FE0EA7FF012FFB3B3B2127FEA3FE00C3A7CB915>I<DA07FCEB03
FE273FE01FFF90380FFF80267FF07FD9C03F13E0D8FFF1B56CB512F001F302F114F801F7
14F302C114E0D9FF009039FF807FFC496DEB003F495CA2495CA2495CB3A6007F023F141F
6C486D48EB0FF83E277BA649>I<EC07F8393FE03FFE486CB51280D8FFF114C001F314E0
13F714C1D9FF0113F0497E5BA25BA25BB3A6127F6C48EB7FE024277BA62F>I<903803FF
80011F13F0017F13FC48B6FC4815804815C048018313E04848C613F049137F4848EB3FF8
A2007F15FC49131FA300FF15FEAC007F15FCA26D133FA2003F15F86D137F6C6CEBFFF0EB
FF836C90B512E06C15C06C1580C6ECFE00013F13F80103138027297DA72E>I<EC1FE039
3FE0FFF8D87FF313FED8FFF7EBFF8090B612C016E0EBFE07D9F80313F0497E6E13F8A215
7FA216FC153FAC157F16F8A215FF16F05C6D4813E0EBFE0F90B612C01680160001F713FC
01F113F09038F07F8091C8FCAD127F6C5A26377BA62F>I<903907F81FF890393FFE3FFC
90B512BF000314FF5A5A4813C114004848137F49133F127F5BA212FF5BAC7F127FA27F12
3F6D137F6D13FF6C13836C90B5FC7E6C14BF6C143F38007FFEEB0FF090C7FCAEED1FF826
377DA62F>I<EC0780383FC03F387FE07F00FF13FF13E113E313E7A213EFECF000EBFFC0
91C7FC5B5B5BA35BB3A2127F6C5A19277CA61F>I<EB3FF848B51280000714E04814F85A
5AA29038E00FF0007F1301EBC000153015007F7F13FCEBFFE06C13FC14FF6C148015E07E
6C14F0000114F86C7E011F13FC1300141F140F0060130712701278127E007F130F39FFE0
1FF890B5FC15F0A2003F14E0000F14C00003140038003FF81E297EA723>I<48B4FC487F
5AA9003FEBFFC04814E0B6FCA36C14C00007EB8000B3A6ECC03015706CEBE1F814FFA27E
15E06C6C1300EB1FF01D327EB022>I<D83FE0EB7FE0486CEBFFF012FFB3A75CA35CA26C
6C5A141FEBFFFE6C5B6C5B00079038F07FE0C60180C7FC24277BA52F>I<007FEC07F0D8
FFC0EB0FF8151F7F007FEC3FF0A27F003FEC7FE0A27F001FECFFC0A27F000F491380A36C
6C481300A36C6C485AA314876CEB8FFCA214CF6CEBDFF8A214FF6D5BA36D5BA36D5BA201
0790C7FC25267EA52A>I<007F027E147F486C01FFECFF806D6E5A5C01E014C0007F4C13
005CA2D83FF002E05B17075C13F8001F9139DFF00FFCA2EC0FCFD80FFC02F85B171F141F
158FD807FE903987FC3FF0A2143F01FF13076C6F485A1503147F6C01FF01FF5B02FE14FF
81A26C01FC5D81A36D4892C7FC826D485C6D486D5A39267EA53E>I<D87F80EB07F0486C
EB0FF86D131F6C7EED3FF0123F7F001FEC7FE07FA26C6CEBFFC0A212076D4813807E0281
13006C1383A26CEBC3FEA214C790387FE7FCA2133F5D131F14FF6D5BA36D5BA27F5D7FA2
6D5BA392C7FC5BA25C1303A2495AEA600F38781FF8387FFFF0A25C5C91C8FC6C5AEA0FF0
25377EA52A>121 D<001FB6FC4815805AA37EC7000F13004A5A4A5AA24A5A4A5A495BA2
495B495B4990C7FCA2495A495A495AA2495A485B485BA2485B4890C8FC485AA2485A485A
90B6FCB71280A46C150021267DA528>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmsy10 10 1
/Fd 1 111 df<126012F07EA21278127CA2123C123EA2121E121FA27E7FA212077FA212
037FA212017FA212007FA21378137CA2133C133EA2131E131FA27F80A2130780A26D7EA2
130180A2130080A21478147CA2143C143EA2141E141FA2801580A2140715C0A2140315E0
A2140115F0A2140015F8A21578157CA2153C153EA2151E150C1F537BBD2A>110
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmr10 10 30
/Fe 30 128 df<B512FCA516057F941C>45 D<121C127FEAFF80A5EA7F00121C09097988
17>I<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C3879B7
2A>49 D<B712E016FC16FF0001903980007FC06C90C7EA1FE0707E707E707EA2707EA283
A75F16035F4C5A4C5A4C5A4C5AEEFF8091B500FCC7FCA291C7EA7F80EE1FE0EE07F0707E
707E83707EA21880177F18C0A7188017FFA24C13005F16034C5AEE1FF8486DEB7FF0B812
C094C7FC16F832397DB83B>66 D<913A01FF800180020FEBE003027F13F8903A01FF807E
07903A03FC000F0FD90FF0EB039F4948EB01DFD93F80EB00FF49C8127F01FE153F120148
48151F4848150FA248481507A2485A1703123F5B007F1601A35B00FF93C7FCAD127F6DED
0180A3123F7F001F160318006C7E5F6C7E17066C6C150E6C6C5D00001618017F15386D6C
5CD91FE05C6D6CEB03C0D903FCEB0F80902701FF803FC7FC9039007FFFFC020F13F00201
1380313D7BBA3C>I<B712C016F816FE000190398001FF806C90C7EA3FE0EE0FF0EE03F8
707E707E177FA2EF3F8018C0171F18E0170F18F0A3EF07F8A418FCAC18F8A4EF0FF0A218
E0A2171F18C0EF3F80A2EF7F0017FE4C5A4C5AEE0FF0EE3FE0486DEBFF80B8C7FC16F816
C036397DB83F>I<B612C0A3C6EBC0006D5AB3B3AD497EB612C0A31A397EB81E>73
D<EC03FF021F13E09138FE01FC903901F8007ED907E0EB1F8049486D7ED93F80EB07F049
C76C7E01FE6E7E48486E7E49157E0003167F4848ED3F80A24848ED1FC0A2001F17E04915
0F003F17F0A3007F17F8491507A300FF17FCAC007F17F86D150FA3003F17F0A26C6CED1F
E0A36C6CED3FC0000717806D157F000317006C6C15FEA26C6C4A5A017F4A5A6D6C495A6D
6C495AD907E0EB1F80D903F8017FC7FC903900FE01FC91381FFFE0020390C8FC363D7BBA
41>79 D<003FB812E0A3D9C003EB001F273E0001FE130348EE01F00078160000701770A3
00601730A400E01738481718A4C71600B3B0913807FF80011FB612E0A335397DB83C>84
D<EB1FE0EBFFFC3803E03F3907000F80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5A
C8FCA4147FEB07FFEB3FE0EBFE00EA03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA314
01A26C13036CEB077C903980063E18383FC01E3A0FE0781FF03A03FFF00FE03A007F8007
C026277DA52A>97 D<EA03F012FFA3120F1203B0EC1FE0EC7FF89038F1E03E9039F3801F
809039F7000FC001FEEB07E049EB03F049EB01F85BED00FCA216FEA2167E167FAA167E16
FEA216FC15016D14F8ED03F07F01EEEB07E001C6EB0FC09039C7801F00903881E07E9038
00FFF8C7EA1FC0283B7EB92E>I<EB03FC90381FFF8090387E03E03901F80070484813F8
3907E001FC380FC003A2EA1F80123F90380001F848EB00F01500A2127E12FEAA127E127F
A26C14067F001F140E6D130C000F141C6C6C13386C6C13706C6C13E039007C07C090381F
FF00EB07F81F277DA525>I<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F
9038F801EF3903F0007F4848133F4848131FA24848130F123F90C7FC5AA2127E12FEAA12
7E127FA27EA26C6C131FA26C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90
381FFE0FD907F813C0283B7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001
F0D807E013F8380FC0004848137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5
127EA2127FA26C14037F001F14076C6C13060007140E6D131CD801F013386C6C13709038
7E03E090381FFF80903803FC0020277EA525>I<147E903803FF8090380FC1E0EB1F8790
383F0FF0137EA213FCA23901F803C091C7FCADB512FCA3D801F8C7FCB3AB487E387FFFF8
A31C3B7FBA19>I<EA03F012FFA3120F1203B0EC0FF0EC3FFCECF03F9039F1C01F809039
F3800FC0EBF70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A3293A7EB92E>
104 D<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487EB512
C0A312387EB717>I<EA03F012FFA3120F1203B1913801FFFCA39138007FC01600157C15
705D4A5A4A5A4AC7FC141E1438147814FC13F1EBF3FEEBF73F01FE7FEBF81F496C7E8114
076E7E6E7E811400157E157F811680ED1FC0486CEB3FF0B500C0B5FCA3283A7EB92C>
107 D<EA03F012FFA3120F1203B3B3AD487EB512C0A3123A7EB917>I<2703F00FF0EB1F
E000FFD93FFCEB7FF8913AF03F01E07E903BF1C01F83803F3D0FF3800FC7001F802603F7
0013CE01FE14DC49D907F8EB0FC0A2495CA3495CB3A3486C496CEB1FE0B500C1B50083B5
FCA340257EA445>I<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF3800FC03803
F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E>I<EB03FE9038
0FFF8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F15C090C71207
4815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6CEB0FC0000F15
806D131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FEC7FC25277EA5
2A>I<3903F01FE000FFEB7FF89038F1E07E9039F3801F803A0FF7000FC0D803FEEB07E0
49EB03F04914F849130116FC150016FEA3167FAA16FEA3ED01FCA26DEB03F816F06D1307
6DEB0FE001F614C09039F7803F009038F1E07E9038F0FFF8EC1FC091C8FCAB487EB512C0
A328357EA42E>I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613EE
9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421>114
D<EBFF03000313E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7F
E013FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303
A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521>I<1318A5
1338A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580
EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E000FFEB01FFA3000F
EB001F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790
381FFF87903A03FC07E00029267EA42E>I<B53A1FFFE03FFEA3260FF8009038000FF86C
48017EEB03E018C00003023EEB0180A26C6C013FEB0300A36C6CEC8006156FA2017E9038
EFC00C15C7A2D93F016D5A15830281EBF038D91F831430150102C3EBF87090260FC60013
60A2D907E66D5A02EC137CA2D903FCEB7F804A133FA2010192C7FC4A7FA20100141E4A13
0E0260130C37257EA33C>119 D<B538803FFEA33A0FF8000FF06C48EB07C00003EC0380
6C7E16007F00001406A2017E5BA2137F6D5BA26D6C5AA2ECC070010F1360A26D6C5AA214
F101035BA2D901FBC7FCA214FF6D5AA2147CA31438A21430A214701460A25CA2EA7C0100
FE5B130391C8FC1306EAFC0EEA701C6C5AEA1FF0EA0FC027357EA32C>121
D<001C131C007F137F39FF80FF80A5397F007F00001C131C190978B72A>127
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmr12 12 19
/Ff 19 122 df<9239FFC001FC020F9038F80FFF913B3F803E3F03C0913BFC00077E07E0
D903F890390FFC0FF0494890383FF81F4948EB7FF0495A494814E049C7FCF00FE0499139
3FC0038049021F90C7FCAFB912F0A3C648C7D81FC0C7FCB3B2486CEC3FF0007FD9FC0FB5
12E0A33C467EC539>11 D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0
A312011380120313005A1206120E5A5A5A12600B1D78891B>44 D<14FF010713E090381F
81F890383E007C01FC133F4848EB1F8049130F4848EB07C04848EB03E0A2000F15F04913
01001F15F8A2003F15FCA390C8FC4815FEA54815FFB3A46C15FEA56D1301003F15FCA300
1F15F8A26C6CEB03F0A36C6CEB07E0000315C06D130F6C6CEB1F806C6CEB3F00013E137C
90381F81F8903807FFE0010090C7FC28447CC131>48 D<143014F013011303131F13FFB5
FC13E713071200B3B3B0497E497E007FB6FCA3204278C131>I<EB03FE90381FFFC0017F
13F03901F80FFC3903C001FE48486C7E000EC7EA7F8048EC3FC0ED1FE04815F00030140F
007015F800601407126CB415FC7F7F1503A46C4813076CC7FCC8FC16F8A2150F16F0151F
16E0A2ED3FC0ED7F8016005D5D4A5A4A5A4A5A5D4A5A4A5A4AC7FC147C5C5C495A495A49
5A49C7120C131E5B013814185B5B485A4848143848C81230000E1570001FB612F0A25A5A
B712E0A326427BC131>I<ED0380A21507150FA2151F153FA2157F15FFA25CEC03BF153F
14071406140C141C141814301470146014C013011480EB03005B13065B131C13185B1370
136013E0485A5B120390C7FC1206120E120C5A123812305A12E0B812C0A3C8383F8000AD
EDFFE0027FEBFFC0A32A437DC231>52 D<B6D8C003B6FCA3000101E0C70007138026007F
80913801FE00B3A991B7FCA30280C71201B3AC2601FFE0913807FF80B6D8C003B6FCA340
447CC349>72 D<010FB512FEA3D9000313806E130080B3B3AB123F487E487EA44A5A1380
1300006C495A00705C6C13076C5C6C495A6CEB1F802603E07FC7FC3800FFFCEB1FE02746
7BC332>74 D<003FB912F8A3903BF0001FF8001F01806D481303003EC7150048187C0078
183CA20070181CA30060180CA5481806A5C81600B3B3A54B7EED7FFE49B77EA33F447DC3
46>84 D<EB07FC90383FFF809038F80FE03903C003F048C66C7E000E6D7ED80FC0137E48
6C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90380FFE1FEB3FC0EBFF00EA
03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F007F14EF6D9038C7E0C000
3F13013A1FE00783F13B07F81E03FF802701FFFC0113003A001FE0007C2B2E7CAC31>97
D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091383C07E091387001F89039FDE0
007E02807F01FFEC1F8091C713C049EC0FE049140717F0A2EE03F8A217FCA2160117FEAB
17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FBEC3F80D9F380EB7E00D9E1C05B
9039E0F001F89039C03C07E09039801FFF80C7D803FCC7FC2F467DC436>I<EB01FE9038
07FFC090381F03F090387E00FC49137E48487F485A4848EB1F80000F15C049130F121F48
4814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA2123F16306C7E1670
000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E90381F80F89038
03FFE0010090C7FC242E7DAC2B>101 D<EA01FC12FFA3120712031201B3B3B3A5487EB5
12F8A315457DC41C>108 D<D801FC01FFEC1FE000FF010701E0EBFFFC913B0F03F801E0
7F913C3C01FC07803F800007903C7000FE0E001FC0000349D97E1C130F2601FDC0D97F38
804A143001FFDA3FF06D7E91C75BA2495DA3495DB3A8486C4A6C497EB5D8F81FB50003B5
12E0A34B2C7DAB52>I<3901FC01FE00FF903807FFC091381E07F091383801F800070170
7F0003EBE0002601FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80B5D8F83F13FE
A32F2C7DAB36>I<EC7F80903803FFF090380FC0FC90383E001F496D7E496D7E48486D7E
48486D7E48486D7E000F81A24848147E003F157FA290C87E481680A44816C0AA6C1680A2
6D147F003F1600A2001F157E6D14FE000F5D6D130100075D6C6C495A6C6C495A6C6C495A
013E49C7FC90381FC0FE903807FFF89038007F802A2E7DAC31>I<3903F803F000FFEB1F
FCEC3C3EEC707F0007EBE0FF3803F9C000015B13FBEC007E153C01FF13005BA45BB3A748
B4FCB512FEA3202C7DAB26>114 D<D801FC147F00FFEC3FFFA300071401000380000181
B3A85EA35DA212006D5B017E9038077F80017F010E13C06D011C13FE90380FC078903803
FFF09026007F8013002F2D7DAB36>117 D<B539F001FFFCA3000790C7EA7FE06C48EC1F
8000011600160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E13E0010F5C
A26D6C485AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F18A215B8EC
3FB0A2EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC5CA25CEAFE
01387C0380D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>121
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmtt12 17.28 3
/Fg 3 116 df<903801FFFE011FEBFFE0017F14F848B612FE486F7E834816F0488283EC
800391C77FEE3FFF160F707F6C48806C486E7F6C5ACA7FA3177FA50303B5FC92B6FC140F
91B7FC1307131F137F90B8FC0003EDE07F48ECE0004849C7FC4813F014804848C8FC485A
5B485A5BA25BA46D15FFA26D5C007F5D6D5CD83FFE141F6D6C017F13F86CD9E007B612FE
91B9FC6C19807E6C16DF6C160F6CEDFC07013FDAF0011400010F91C7EA3FFE010101F091
C8FC414178BF4A>97 D<383FFFC0487FB57EA57E7EEA000FB1043FB512FC4C8093B7FCA5
705C705C9326003FF8C7FC4D5A4D5A4C5B4C5B4C90C8FC4C5A4C5AEE7FF84C5A4B5B4B5B
4B5B4B90C9FC4B5AED3FF8157F4B7E14F102F37F02F77F91B67E15FD03F87F4B6C7E4B6C
7E15C04B6C7E4B6C7E4A6D7E5C4A6D7E4A6D7F707FA2717E717EA2717E717E717EA2717E
717F003FB500FC013FEBFF80486E4914C0B790B612E0A56C4A6D14C06C4A6D148043587D
D74A>107 D<913A1FFF800F800103B5EAF81F011F9138FF3FC0017F15FF48B8FC5A5A5A
5A48EBE00049C7121FD87FF880491403D8FFC080A25B82A37FEF7F806C7E01F892C7FC13
FE383FFFC06C13FE6CEBFFF86CECFFE06C15FC6CEDFF806C6C15F0011F81010315FED900
7F8002011580DA000F14C0DB003F13E01607040113F0D83F809138007FF8007F163F486C
ED1FFC170F7F1707A27FA26D150FA27F6DED1FF86D157F02C0ECFFF06E130302FC013F13
E091B712C0A2188001BF1600019F15FC010F15F0010315C0267E007F49C7FC007C010713
E0364176BF4A>115 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmr17 17.28 22
/Fh 22 122 df<170FA34D7EA24D7EA34D7EA34D7EA34C7F17DFA29338039FFC178FA293
38070FFE1707040F7FEE0E03A2041E80EE1C01A2043C80EE3800A24C80187FA24C80183F
A24B4880181F0303814C130FA203078193C71207A24B81030E80A24B8284A24B8284A24B
82197F03F0824B153FA20201834B151FA202038392B8FCA24A83A292C91207020E8385A2
4A8485023C84023882A20278840270177FA202F0844A173FA24948841A1FA24948841A0F
A249CB7F1A074985865B496C85497E48486C4D7F000F01F8051F13F0B60407B612F0A45C
657DE463>65 D<B712C0A4C66CEB8000D91FFEC7FC6D5AB3B3B3B3AE497E90387FFF80B7
12C0A422627AE12F>73 D<B912C018FEF0FFC019F0C601FCC813FCD93FF8ED0FFF011F04
037F06007FF13FF0737E737E1907737E86731380A27313C0A31BE01A7FA21BF0A91BE0A2
1AFF1BC0A34F13801B00614F5A624F5A4F5AF17FE04F5A060390C7FCF01FFE943801FFF8
91B812E096C8FC18F802F8CCFCB3B3A4497E90B5FCB7FCA44C6279E15A>80
D<DA07FF1403023F01F05B49B512FC010702FF5B90260FFC0013C0D93FE090380FF01FD9
7F80EB03F801FEC86C5A4848157E4848ED1F7F48486F5A4848815B001F824981003F8290
CAFC4883A2007E83A212FE84A384A27EA36D82A26C7EA26D93C7FC6C7E7F7F6C7E6D7E6C
13E06C13FCECFFC06C14F86CECFF806C15F86DECFF80011F15E06D15F8010315FE01006F
7E021F81020181DA003F80030380DB003F7F04037FEE007FEF1FFF71138017037113C083
A2F07FE0183FA2181F00E018F0180FA41807A27EA47E19E0180F7E19C07E6C171F19806D
163F6D17006D5E6D16FE486C5E6D4B5AD8FC7F1503D91F80EC0FF026F80FE04A5AD907FC
EC7F8029F001FFE003FFC7FC6D6CB512FC48011F14F0020314C0489026001FFEC8FC3C66
7AE349>83 D<EC3FF0903803FFFE010F6D7E90393FC03FE090397E0007F801F86D7ED801
E06D7E48486D7E48486E7E48C86C7E7F01F06E7E487E6D6E7EA3707EA36C5AEA03E0C9FC
A6167FED7FFF020FB5FC91387FF807903801FF80903807FC00EB1FF0EB7FC0495AD803FE
C7FC485A120F5B485A485AA2484817E0A312FF5BA2160FA3161F6D141B007F153B16736D
913971FC01C06C6C14E1001FEC01C1D80FFC903A0780FE03806C6C903A0F00FF07002701
FF807E6DB4FC27007FFFF86D5A011F01E0EB1FF8010190C7EA07E03B417ABF42>97
D<EB03C0EA07FFB5FCA41201EA007FA2133FB3AAEE7FC0923807FFFC031F13FF92397F00
7FC003F8EB0FF0DAC3E06D7EDAC780EB01FC02CFC87E02DE157F02FC6F7E4A824A6F7E18
0F4A82727E5C727EA2851801A285A3841A80AD1A0060A461180361A21807616E5E180F6E
4B5A6E5E02B8153F023C4B5A6E4BC7FC6E4A5A90263E0780495A6E6CEB0FF090263C01F0
495ADA007EEBFF806FB448C8FC0138010F13F890C8138041657DE349>I<4AB47E020F13
F8023F13FE9139FF007F80D903FCEB07E0D907F0EB01F0D91FE0EB007849488049488049
C87E48485D4915FF00034B138048485CA2485AA2485AA2003F6F130049EC007C94C7FC12
7FA35B12FFAD127F7FA4123F7FA2001FEE01C07F000F16036D168012076C6C15076D1600
00015E6C6C151E6D6C5C6D6C5C6D6C5CD90FF8495AD903FCEB07C0903A00FF803F809126
3FFFFEC7FC020F13F80201138032417CBF3A>I<EC03FE91381FFFE091B512F8903901FE
03FE903A07F0007F8049486D7ED93FC06D7E49C76C7E496E7E4914034848814848140100
0782491400000F8283485A1880123F49153FA2007F17C0A35BA212FF90B8FCA30180CAFC
A9127F7FA3123FA27F121FEF01C06C7E17036C6C1680A26C6C15070001EE0F006D150E6C
6C151E6D6C5C6D6C5C6D6C5CD907F0EB03E0D903FC495A902700FF803FC7FC91383FFFFC
020F13F00201138032417CBF3A>101 D<ED0FF0ED7FFC4AB5FC913907F81F8091390FE0
0FC091381FC03F91393F807FE0EC7F005C495A5C0103EC3FC0A24948EB0F0093C7FCA249
5AB3A5B712F0A426000FF0C8FCB3B3B0497EEB3FFE003FB6FCA42B657EE428>I<F03F80
DA03FC903801FFE091273FFFC00713F091B539F01FC1F8903B03FC03FC3E03903A07F000
FE784948EB7FE04948EB3FC04948011FEB01F049C76C6CC7FC01FE6E7EA248486E7EA200
0382A2491401000782AA00035E6D1403A200015EA26C6C4A5AA2017F4A5A6D6C495A6D6C
495A496C49C8FCD937F013FE903973FC03FC0160B512F0D9E03F13C0DA03FCC9FC4848CB
FCA57FA27FA27F6C7E13FF91B512FE6DECFFF06D15FE6D6F7E6D16E084013F16FC01FEC7
00017FD803F8EC001FD807E0ED03FF4848030013804848167F003FEF3FC090CA121F127E
F00FE012FE481707A66C170F007E18C0A2007F171F6C6CEE3F806C6CEE7F00000F177ED8
07F04B5A6C6C4B5A6C6C4B5AD8007FED1FC0D93FE0ECFF80D90FFED90FFEC7FC0101B612
F0D9003F1480020101F0C8FC3D5E7DBF42>I<EB03C0EA07FFB5FCA41201EA007FA2133F
B3AAEE7FE0923803FFFC030F13FFDB3F0013C00378EB1FE04B6D7EDAC1C06D7EDAC38080
02C7C7120302CE81170114DC14D802F86E7E5CA35CA35CB3B3496C4A7F496C4A7FB6D8F0
03B612C0A442647DE349>I<133C13FF487F487FA66C5B6C90C7FC133C90C8FCB3A2EB03
C0EA07FF127FA41201EA007FA2133FB3B3AC497E497EB612E0A41B5F7DDE23>I<EB03C0
EA07FFB5FCA41201EA007FA2133FB3AB0403B512F8A40400148094387FFC0018E06095C7
FC177E5F17F04C5A4C5A4C5A4CC8FC163E5E5E4B5A4B5A4B5A4B5A151F4B7E4B7E15FF02
C17F9138C3CFF8ECC7879138CF07FC9138FE03FEECFC0102F87F4A6C7F4A137F4A80707E
161F83707E160783707E160183707F177F84717E171F84717E84A284496CEDFF80496C4A
13E0B600F090B6FCA440647CE346>107 D<EB03C0EA07FFB5FCA41201EA007FA2133FB3
B3B3B3AD497E497EB612F0A41C647DE323>I<D903C0D9FFC0EC07FED807FF010301F891
381FFFC0B5010F01FE027F13F0923D3F00FF8001F807FC0378903B3FC003C001FEDAC1E0
90261FE00FC77E0001D9C3C090260FF01E6E7ED8007F49902607F81C6E7E02C7C75CD93F
CE6E6C486E7E02CC166002DC16E002D85E02F8DA01FF6F7E4A5EA24A93C8FCA44A5DB3B3
496C4A6C4B7E496C4A6D4A7EB6D8F007B6D8803FB512FCA4663F7CBE6F>I<D903C0EB7F
E0D807FF903803FFFCB5010F13FFDB3F0013C00378EB1FE04B6D7E0001D9C1C06D7E2700
7FC3808002C7C71203D93FCE81170114DC14D802F86E7E5CA35CA35CB3B3496C4A7F496C
4A7FB6D8F003B612C0A4423F7DBE49>I<EDFF80020F13F8023F13FE9139FF007F80D903
FCEB1FE0D907F0EB07F0D90FC0EB01F8D93F80EB00FE49C8127F017E81496F7E48486F7E
00038349150700078348486F7EA2001F83491501A2003F83A348486F7EA400FF1880AC00
7F1800A26D5DA2003F5FA36C6C4B5AA36C6C4B5A00075FA26C6C4B5A6C6C4B5AA26C6C4B
5A017F4BC7FC6D6C14FE6D6C495AD90FF0EB07F8D903FCEB1FE0D900FFEB7F806EB5C8FC
020F13F8020113C039417CBF42>I<9039078003F8D807FFEB0FFFB5013F13C092387C0F
E0913881F01F9238E03FF00001EB838039007F8700148FEB3F8E029CEB1FE0EE0FC00298
EB030002B890C7FCA214B014F0A25CA55CB3B0497EEBFFF8B612FCA42C3F7CBE33>114
D<9139FFE00180010FEBFC03017FEBFF073A01FF001FCFD803F8EB03EFD807E0EB01FF48
487F4848147F48C8123F003E151F007E150F127CA200FC1507A316037EA27E7F6C7E6D91
C7FC13F8EA3FFE381FFFF06CEBFF806C14F86C14FF6C15C06C6C14F0011F80010714FED9
007F7F02031480DA003F13C01503030013E0167F00E0ED1FF0160F17F86C15071603A36C
1501A37EA26C16F016037E17E06D14076DEC0FC06D1580D8FDF0141FD8F8F8EC7F00013E
14FC3AF01FC00FF80107B512E0D8E001148027C0003FF8C7FC2D417DBF34>I<1438A714
78A414F8A31301A31303A21307130F131FA2137F13FF1203000F90B6FCB8FCA3260007F8
C8FCB3AE17E0AE6D6CEB01C0A316036D6C148016076D6C14006E6C5A91383FC01E91381F
F07C6EB45A020313E09138007F802B597FD733>I<B66C49B512E0A4000101F8C8387FFE
0026007FE0ED1FF819E0013F705A61131F6E93C7FC130F180E6E151E0107161C8001035E
A26E157801011670806D5EA26F1301027F5DA26E6C495AA26F1307021F92C8FCA26E6C13
0EA26F131E0207141CA26F133C020314388102015CA26F13F06E5C168092387F81C0A216
C3033F5B16E3DB1FE7C9FCA216FF6F5AA26F5AA36F5AA26F5AA36F5A433F7FBD46>118
D<B66C49B512E0A4000101F8C8387FFE0026007FE0ED1FF819E0013F705A61131F6E93C7
FC010F160EA26D6C5DA26E153C01031638A26D6C5DA26E15F06D5EA26E6C495AA26F1303
023F5DA26F1307021F92C8FC6F5B020F140EA26F131E0207141C6F133C02031438A26F13
78020114706F13F06E5CA21681037F5B16C3033F5BA216E7031F90C9FC16FF6F5AA36F5A
A26F5AA36F5AA26F5AA215015E15035EA2150793CAFC5D150EA2151E151C153CD81F8013
38487E486C5BA25D14015D49485A383F80074948CBFC001E133E380FC0FC6CB45A000113
E06C6CCCFC435B7FBD46>121 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 407 797 a Fh(Informator)42 b(Sym)l(b)t(ols)h(Av)-7
b(ailable)46 b(in)e(the)g Fg(skak)f Fh(P)l(ac)l(k)-7
b(age)1500 1038 y Ff(T)f(orb)s(en)33 b(Ho\013mann)1592
1233 y(July)g(21,)f(2004)83 1543 y Fe(Dirk)23 b(B\177)-42
b(ac)n(hle)22 b(has)h(b)r(een)h(so)e(kind)h(as)g(to)g(create)f(a)h(n)n
(um-)0 1643 y(b)r(er)34 b(of)g(the)h(sym)n(b)r(ols)e(used)i(in)f(the)h
(Informator.)55 b(They)0 1742 y(are)27 b(no)n(w)g(a)g(part)g(of)g(the)h
(sk)-5 b(ak)27 b(fon)n(t.)p 83 2536 1031 7 v 133 2629
a(Command)289 b(Output)p 83 2677 1031 5 v 133 2784 a
Fd(n)p Fc(wb)s(etter)431 b Fb(f)133 2896 y Fd(n)p Fc(bb)s(etter)446
b Fb(g)133 3009 y Fd(n)p Fc(wupp)s(erhand)262 b Fb(c)133
3122 y Fd(n)p Fc(bupp)s(erhand)277 b Fb(e)133 3235 y
Fd(n)p Fc(wdecisive)348 b Fb(h)133 3348 y Fd(n)p Fc(b)s(decisive)360
b Fb(i)133 3461 y Fd(n)p Fc(equal)525 b Fb(j)133 3574
y Fd(n)p Fc(unclea)m(r)456 b Fb(k)133 3687 y Fd(n)p Fc(comp)s(ensation)
200 b Fb(n)133 3800 y Fd(n)p Fc(devadvantage)192 b Fb(t)133
3913 y Fd(n)p Fc(mo)m(rero)s(om)325 b Fb(U)133 4026 y
Fd(n)p Fc(withattack)312 b Fb(A)133 4138 y Fd(n)p Fc(withinit)443
b Fb(C)133 4251 y Fd(n)p Fc(counterpla)m(y)282 b Fb(V)133
4364 y Fd(n)p Fc(zugzw)m(ang)344 b Fb(D)133 4477 y Fd(n)p
Fc(mate)524 b Fb(m)133 4590 y Fd(n)p Fc(withidea)395
b Fb(E)133 4703 y Fd(n)p Fc(onlymove)354 b Fb(F)133 4816
y Fd(n)p Fc(b)s(etteris)416 b Fb(b)133 4929 y Fd(n)p
Fc(\014le)601 b Fb(H)133 5042 y Fd(n)p Fc(diagonal)397
b Fb(G)133 5155 y Fd(n)p Fc(centre)476 b Fb(I)133 5268
y Fd(n)p Fc(kside)532 b Fb(O)133 5380 y Fd(n)p Fc(qside)d
Fb(M)p 83 5431 1031 7 v 2001 1467 1007 7 v 2051 1560
a Fe(Command)265 b(Output)p 2001 1608 1007 5 v 2051 1714
a Fd(n)p Fc(w)m(eakpt)420 b Fb(J)2051 1827 y Fd(n)p Fc(ending)440
b Fb(L)2051 1940 y Fd(n)p Fc(bishoppair)304 b Fb(a)2051
2053 y Fd(n)p Fc(opp)s(osbishops)188 b Fb(o)2051 2166
y Fd(n)p Fc(samebishops)218 b Fb(s)2051 2279 y Fd(n)p
Fc(unitedpa)m(wns)i Fb(u)2051 2392 y Fd(n)p Fc(seppa)m(wns)323
b Fb(q)2051 2505 y Fd(n)p Fc(doublepa)m(wns)212 b Fb(d)2051
2618 y Fd(n)p Fc(passedpa)m(wn)243 b Fb(r)2051 2730 y
Fd(n)p Fc(mo)m(repa)m(wns)277 b Fb(S)2051 2843 y Fd(n)p
Fc(timelimit)350 b Fb(T)2051 2943 y Fd(n)p Fc(novelt)m(y)431
b Fa(N)2051 3043 y Fd(n)p Fc(comment)322 b Fa(RR)2051
3142 y Fd(n)p Fc(va)m(rious)441 b Fa(R)2051 3255 y Fd(n)p
Fc(without)399 b Fb(v)2051 3368 y Fd(n)p Fc(with)526
b Fb(w)2051 3481 y Fd(n)p Fc(etc)598 b Fb(P)2051 3594
y Fd(n)p Fc(see)571 b Fb(l)2051 3694 y Fd(n)p Fc(ma)m(rk)m(era)387
b Fb(x)2051 3793 y Fd(n)p Fc(ma)m(rk)m(erb)d Fb(y)p 2001
3844 1007 7 v 1856 5662 a Fe(1)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
